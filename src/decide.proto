syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

package decide;

/* The payload for a requested state change to a component. Components must
   define a protobuf message type for their state */
message StateChange {
  string component = 1;
  google.protobuf.Any state = 2;
}

/* The payload for a requested change to the parameters for a component.
   Components must define a protobuf message type for their parameters */
message ComponentParams {
  string component = 1;
  google.protobuf.Any parameters = 2;
}

/* This is what gets sent on the wire */
message Request {
  string protocol = 1;
  oneof request {
    // request change to state of a component. Reply type is ok or error.
    StateChange state_change = 2;
    // request reset to default state; value is name of component. Reply type is ok or error
    string state_reset = 3;
    // request lock on experiment; value is name of experiment. Reply type is ok or error
    string lock_expt = 16;
    // request unlock of experiment. Reply type is ok or error
    google.protobuf.Empty unlock_expt = 17;
    // request update to parameter values. Reply type is ok or error.
    ComponentParams set_parameters = 19;
    // request parameter values for component. Reply type is params or error.
    string get_parameters = 20;
    // request config values for component. Reply type is config or error.
    string get_component_config = 21;
    // request config identifier for the controller. Reply type is config or error.
    google.protobuf.Empty get_controller_config = 22;
  }
}

/* These are the reply types */
message Reply {
  string protocol = 1;
  oneof reply {
    // For state_change, state_reset, lock_expt, unlock_expt:
    // indicates the request was correctly formed and was acted on
    google.protobuf.Empty ok = 2;
    // indicates an error with the request, contents give the cause
    string error = 3;
    // reply to get_parameters
    google.protobuf.Any params = 19;
    // reply to get_component_config, and get_controller_config
    map<string, string> config = 20;
  }
}

/* In ZMQ, the first frame of a PUB message is the topic. In this protocol, the
 * topic is used to specify the message type, allowing receivers to filter what
 * they want to see. There are three main topics: `state` for state changes,
 * `error` for fatal error messages, and `log` for informative log messages. The
 * same protobuf type is used for all three. For error and log messages, the
 * human-readable explanation is stored in the `label` field.
 */
message Pub {
  uint64 time = 1;
  string component = 2;
  oneof value {
    int scalar = 3;
    string label = 4;
  }
}
